diff --git a/classify/train.py b/classify/train.py
index a50845a..6ad8c2c 100644
--- a/classify/train.py
+++ b/classify/train.py
@@ -13,6 +13,16 @@ YOLOv5-cls models:  --model yolov5n-cls.pt, yolov5s-cls.pt, yolov5m-cls.pt, yolo
 Torchvision models: --model resnet50, efficientnet_b0, etc. See https://pytorch.org/vision/stable/models.html
 """
 
+from utils.torch_utils import (ModelEMA, model_info, reshape_classifier_output, select_device, smart_DDP,
+                               smart_optimizer, smartCrossEntropyLoss, torch_distributed_zero_first)
+from utils.plots import imshow_cls
+from utils.loggers import GenericLogger
+from utils.general import (DATASETS_DIR, LOGGER, TQDM_BAR_FORMAT, WorkingDirectory, check_git_info, check_git_status,
+                           check_requirements, colorstr, download, increment_path, init_seeds, print_args, yaml_save)
+from utils.dataloaders import create_classification_dataloader
+from models.yolo import ClassificationModel, DetectionModel
+from models.experimental import attempt_load
+from classify import val as validate
 import argparse
 import os
 import subprocess
@@ -21,6 +31,7 @@ import time
 from copy import deepcopy
 from datetime import datetime
 from pathlib import Path
+import json
 
 import torch
 import torch.distributed as dist
@@ -36,16 +47,6 @@ if str(ROOT) not in sys.path:
     sys.path.append(str(ROOT))  # add ROOT to PATH
 ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative
 
-from classify import val as validate
-from models.experimental import attempt_load
-from models.yolo import ClassificationModel, DetectionModel
-from utils.dataloaders import create_classification_dataloader
-from utils.general import (DATASETS_DIR, LOGGER, TQDM_BAR_FORMAT, WorkingDirectory, check_git_info, check_git_status,
-                           check_requirements, colorstr, download, increment_path, init_seeds, print_args, yaml_save)
-from utils.loggers import GenericLogger
-from utils.plots import imshow_cls
-from utils.torch_utils import (ModelEMA, model_info, reshape_classifier_output, select_device, smart_DDP,
-                               smart_optimizer, smartCrossEntropyLoss, torch_distributed_zero_first)
 
 LOCAL_RANK = int(os.getenv('LOCAL_RANK', -1))  # https://pytorch.org/docs/stable/elastic/run.html
 RANK = int(os.getenv('RANK', -1))
@@ -135,8 +136,8 @@ def train(opt, device):
         if opt.verbose:
             LOGGER.info(model)
         images, labels = next(iter(trainloader))
-        file = imshow_cls(images[:25], labels[:25], names=model.names, f=save_dir / 'train_images.jpg')
-        logger.log_images(file, name='Train Examples')
+        # file = imshow_cls(images[:25], labels[:25], names=model.names, f=save_dir / 'train_images.jpg')
+        # logger.log_images(file, name='Train Examples')
         logger.log_graph(model, imgsz)  # log model
 
     # Optimizer
@@ -203,10 +204,10 @@ def train(opt, device):
 
                 # Test
                 if i == len(pbar) - 1:  # last batch
-                    top1, top5, vloss = validate.run(model=ema.ema,
-                                                     dataloader=testloader,
-                                                     criterion=criterion,
-                                                     pbar=pbar)  # test accuracy, loss
+                    top1, top5, vloss, tp, fp, fn = validate.run(model=ema.ema,
+                                                                 dataloader=testloader,
+                                                                 criterion=criterion,
+                                                                 pbar=pbar)  # test accuracy, loss
                     fitness = top1  # define fitness as top1 accuracy
 
         # Scheduler
@@ -243,8 +244,18 @@ def train(opt, device):
 
                 # Save last, best and delete
                 torch.save(ckpt, last)
+                confusion_matrices = {}
+                LOGGER.error(model.names)
+                for idx, name in enumerate(model.names):
+                    confusion_matrices[name] = {'tp': int(tp[idx]), 'fp': int(fp[idx]), 'fn': int(fn[idx])}
+                if confusion_matrices:
+                    with open(f'{wdir}/last.json', 'w+') as f:
+                        json.dump(confusion_matrices, f)
                 if best_fitness == fitness:
                     torch.save(ckpt, best)
+                    if confusion_matrices:
+                        with open(f'{wdir}/best.json', 'w+') as f:
+                            json.dump(confusion_matrices, f)
                 del ckpt
 
     # Train complete
diff --git a/classify/val.py b/classify/val.py
index 8657036..e0665b0 100644
--- a/classify/val.py
+++ b/classify/val.py
@@ -20,6 +20,11 @@ Usage - formats:
                                        yolov5s-cls_paddle_model       # PaddlePaddle
 """
 
+from utils.torch_utils import select_device, smart_inference_mode
+from utils.general import (LOGGER, TQDM_BAR_FORMAT, Profile, check_img_size, check_requirements, colorstr,
+                           increment_path, print_args)
+from utils.dataloaders import create_classification_dataloader
+from models.common import DetectMultiBackend
 import argparse
 import os
 import sys
@@ -27,6 +32,8 @@ from pathlib import Path
 
 import torch
 from tqdm import tqdm
+from sklearn.metrics import confusion_matrix
+import numpy as np
 
 FILE = Path(__file__).resolve()
 ROOT = FILE.parents[1]  # YOLOv5 root directory
@@ -34,11 +41,13 @@ if str(ROOT) not in sys.path:
     sys.path.append(str(ROOT))  # add ROOT to PATH
 ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative
 
-from models.common import DetectMultiBackend
-from utils.dataloaders import create_classification_dataloader
-from utils.general import (LOGGER, TQDM_BAR_FORMAT, Profile, check_img_size, check_requirements, colorstr,
-                           increment_path, print_args)
-from utils.torch_utils import select_device, smart_inference_mode
+
+def calculate_performance(confusion_matrix):
+    classes = confusion_matrix.shape[0]
+    tp = np.diag(confusion_matrix)
+    fn = [confusion_matrix[i, :].sum() - tp[i] for i in range(classes)]
+    fp = [confusion_matrix[:, i].sum() - tp[i] for i in range(classes)]
+    return tp, fn, fp
 
 
 @smart_inference_mode()
@@ -118,6 +127,8 @@ def run(
 
     loss /= n
     pred, targets = torch.cat(pred), torch.cat(targets)
+    cm = confusion_matrix(targets.cpu(), pred.cpu()[:, 0], labels=range(len(model.names)))
+    tp, fn, fp = calculate_performance(cm)
     correct = (targets[:, None] == pred).float()
     acc = torch.stack((correct[:, 0], correct.max(1).values), dim=1)  # (top1, top5) accuracy
     top1, top5 = acc.mean(0).tolist()
@@ -138,7 +149,7 @@ def run(
         LOGGER.info(f'Speed: %.1fms pre-process, %.1fms inference, %.1fms post-process per image at shape {shape}' % t)
         LOGGER.info(f"Results saved to {colorstr('bold', save_dir)}")
 
-    return top1, top5, loss
+    return top1, top5, loss, tp, fp, fn
 
 
 def parse_opt():
